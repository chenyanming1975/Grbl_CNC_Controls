<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAMAEBAAAAAAAABoBQAANgAAACAgAAAAAAAAqAgAAJ4FAAAwMAAAAAAAAKgOAABGDgAAKAAAABAA
        AAAgAAAAAQAIAAAAAABAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AW518AAZqOACmybcA1ebdADGE
        WgCAs5oAvtjLAEaQawAadUgAbqiLAJK+qADu9fIA4OznAE+WcwAje08AOolhAMzh1wAScEEA9vr4ALfT
        xQDF3NEAAGYzAHSskAB6r5UAmMGsANrp4gAMbj0AS5NuADaGXgBqpYgAU5d2ACB5TADC2s4A/P39AJC8
        pQAJazoA2OjfABd0RgDP4tkAlcCqAESPaQBMlHAAUpd0AJG9pgBzq48AGHRGAMHazgClybcAgLOZAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXFxcXFxcXFxcXFxcXFxcXFxcXFxcX
        FxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXHR8XFxMLMQwGFxcXFxcX
        FzIFFxMSEhkkFA8XFxcXFxcyBRcuDScXFykbAxcXFxcXMgUXBBUXFxcgARAXFxcXFzIFFxoWFxcXAiMK
        FxcXFxcyBRcrIyoXHCIIJRcXFxcXMgUXFwcNMA4mEBcXFxcXFx4JFxcXIQkRAxcXFxcXFxcsLQMXFxcX
        FxcXFxcXFxcXGCgvFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgA
        AAAgAAAAQAAAAAEACAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AF+ffwAJazoArc69ADSF
        XQDW5t4AhbadAB13SwBLk28AwNnNAJjBrQDs8/AAcKmNAOHt5wDK39UAPotlAFWZdwB7sJUAt9TFAI67
        pQAScUEAAGYzAPb6+AChxrQAZ6SFAC2BVwDb6uIApsq4APH39ADn8OwAOYhhAEOOaQBQlnMAWpx7AMXc
        0ACTvqgAdayQAGyniQCKuaIAf7KYABp2SAD8/f0AA2g1AOTv6QAgeU0AMoNaALTSwwBGkGsAZKKDAM3h
        1gCpy7oA9Pj2AO718gAvg1kA3+zlADuKYgC51ccAUpd1AFydfQBhoIEAbqiLAHetkgDo8u0A3evkANrp
        4QDX598AM4RcAMbd0QC108QArM28AJfArADz+PUA5vDrAC6CVwDl7+oA4+7pADyKYwBTmHUAv9nMAF2e
        fQC208UA9/r4AB13SgA+i2QAUpd0AJK+qAB+spgAhbWdAIu5ogAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWNjA7OBUWFhYWFhYWFhYWFhYWFhYWFh4BURYWFhYWEC8XAQEBP0cpFhYWFhYW
        FhYWFhYWFhYWSQFFFhYWFlA0AQEjRkEBATdUFhYWFhYWFhYWFhYWFhZJAUUWFhYQHQEsMBYWFhlSAUAp
        FhYWFhYWFhYWFhYWFkkBRRYWFi8BKjAWFhYWFg0BAQsWFhYWFhYWFhYWFhYWSQFFFhYuFwETFhYWFhYW
        KxsBTBUWFhYWFhYWFhYWFhZJAUUWFiEBAVcWFhYWFhYWGAEBHxYWFhYWFhYWFhYWFkkBRRYWAgEBPRYW
        FhYWFhZZAQEJFhYWFhYWFhYWFhYWSQFFFhY6AQElFhYWFhYWFiQBASAWFhYWFhYWFhYWFhZJAUUWFk0q
        ARwWFhYWFhYWCgEXBRYWFhYWFhYWFhYWFkkBRRYWK0QBDC0WFhYWFhAqAU8rFhYWFhYWFhYWFhYWSQFF
        FhYWTioBORUWFhZTMgEBIhYWFhYWFhYWFhYWFhZJAUUWFhYWVgEBQidYFA4BAVYWFhYWFhYWFhYWFhYW
        FkkBRRYWFhYWJksBAQEBAQw+FhYWFhYWFhYWFhYWFhYWETsJFhYWFhYWFTwSBAcxKRYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFkMCCBYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhZKNQEPFRYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFlUBAUgaFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWAzMGKCsWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAADAA
        AABgAAAAAQAIAAAAAACACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AXp5/AAlrOgCvz78AM4VcANfn
        3wCFtZ0AHnhLAEiSbQCZwq4AwtvPAOrz7gBxqo0ApMm2AD6LZACPvKUAzOHWACp/VABVmXcAeq+VAOHt
        5wAAZjMA9vr4ABVzRABnpIUAutbIAE6VcgBDjmkAf7OZAKnMugBsp4kA0ePaADmIYQCfxrMAs9LDAO71
        8gDl7+sAdq2RABp1SAAuglcAibigAPL39QDd6+QAv9jMAMbd0QAMbT0AlsCrAJK+qAD6+/oAA2g1ACF6
        TQDa6eIAJ31SANTl3QDJ39QAS5NwAKzNvQCMuqMABmo4ADaGXgD9/f0A6PHsADGDWgBGkGsAose0AOPu
        6QC918oAsdDBAFeaeQBcnX0Ac6uPAHiukwDZ6OAAPIpjAMHazQCoyrkAZaOEAPj7+QDP49kAHXdKAO30
        8QAtgVYA1ubeAMrg1QCy0cIArc6+AGumiAAgeU0A2ujhADqJYQDQ4tkASJFsAMDZzQBNlXEAsNDAAKHG
        tAB3rZIAkr2nAJC8pgCNu6MADG08APn7+gD3+/kAIHpNAOPu6AAtgVcA2unhANfn4ADV5t4Ayt/VAEuT
        bwBXmngAqcu6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWXgcHB3AWFhYWFhYWFhYyVw5JU1MGX0gYFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        YQEBAWMWFhYWFhYWFiYVAQEBAQEBAQFREC4WFhYWFhYWFhYWFhYWFhYWFhYWFhYWYQEBAWMWFhYWFhZl
        cQEBAQEBAQEBAQEBAVsoFhYWFhYWFhYWFhYWFhYWFhYWFhYWYQEBAWMWFhYWFhZWAQEBAVVaFhYzQWcB
        AQE2UBYWFhYWFhYWFhYWFhYWFhYWFhYWYQEBAWMWFhYWFhQBAQFmDRYWFhYWFlw+AQEBRBYWFhYWFhYW
        FhYWFhYWFhYWFhYWYQEBAWMWFhYWMhUBAQFjFhYWFhYWFhZGZgEBARMWFhYWFhYWFhYWFhYWFhYWFhYW
        YQEBAWMWFhYWGQEBAVkyFhYWFhYWFhYWHgEBATkWFhYWFhYWFhYWFhYWFhYWFhYWYQEBAWMWFhYWVgEB
        ASkWFhYWFhYWFhYWCQEBAQwIFhYWFhYWFhYWFhYWFhYWFhYWYQEBAWMWFhYWbQEBARIWFhYWFhYWFhYW
        FgwBAQE4FhYWFhYWFhYWFhYWFhYWFhYWYQEBAWMWFhYWaQEBATsWFhYWFhYWFhYWFm4BAQFNFhYWFhYW
        FhYWFhYWFhYWFhYWYQEBAWMWFhYWJAEBPRYWFhYWFhYWFhYWFgsBAQFHFhYWFhYWFhYWFhYWFhYWFhYW
        YQEBAWMWFhYWKwEBAQMWFhYWFhYWFhYWFjcBAQFNFhYWFhYWFhYWFhYWFhYWFhYWYQEBAWMWFhYWNwEB
        AWoWFhYWFhYWFhYWFiUBAQFFFhYWFhYWFhYWFhYWFhYWFhYWYQEBAWMWFhYWIgEBAWQWFhYWFhYWFhYW
        DwEBASRSFhYWFhYWFhYWFhYWFhYWFhYWYQEBAWMWFhYWGwEBATQ7FhYWFhYWFhYWYAEBAUsWFhYWFhYW
        FhYWFhYWFhYWFhYWYQEBAWMWFhYWFiABAQFjFhYWFhYWFhZvMQEBAR8WFhYWFhYWFhYWFhYWFhYWFhYW
        YQEBAWMWFhYWFgJmAQFmRxYWFhYWFjwVAQEBLTsWFhYWFhYWFhYWFhYWFhYWFhYWYQEBAWMWFhYWFhZi
        AQEBAQRvFhYzMCoBAQFCPxYWFhYWFhYWFhYWFhYWFhYWFhYWYQEBAWMWFhYWFhYyOmYBAQEBAQEBAQEB
        AWscFhYWFhYWFhYWFhYWFhYWFhYWFhYWYQEBAWMWFhYWFhYWFhNUAQEBAQEBAQFODlgWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWXgcHB3AWFhYWFhYWFhYWQC9dU1MGIx1oFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFjNKNRYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWIUMBERMWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWGgEBAU81FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        bAEBARcFFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWcQEBASwIFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWJwo2TCgWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>